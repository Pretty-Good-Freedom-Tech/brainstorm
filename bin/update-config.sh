#!/bin/bash
# Hasenpfeffr Configuration Update Script
# This script securely updates the configuration in /etc/hasenpfeffr.conf
# and restarts affected services.

# Ensure script is run as root
if [ "$(id -u)" -ne 0 ]; then
    echo "This script must be run as root" >&2
    exit 1
fi

CONFIG_FILE="/etc/hasenpfeffr.conf"
BACKUP_DIR="/etc/hasenpfeffr-backups"
TIMESTAMP=$(date +"%Y%m%d%H%M%S")

# Create backup directory if it doesn't exist
mkdir -p $BACKUP_DIR

# Backup existing configuration
if [ -f "$CONFIG_FILE" ]; then
    echo "Backing up existing configuration to $BACKUP_DIR/hasenpfeffr.conf.$TIMESTAMP"
    cp "$CONFIG_FILE" "$BACKUP_DIR/hasenpfeffr.conf.$TIMESTAMP"
fi

# Function to prompt for a configuration value
get_config_value() {
    local var_name=$1
    local current_value=$2
    local description=$3
    local is_sensitive=$4
    
    if [ -n "$current_value" ]; then
        if [ "$is_sensitive" = "true" ]; then
            read -p "$description [$current_value - press Enter to keep or type new value]: " new_value
        else
            read -p "$description [$current_value]: " new_value
        fi
        echo ${new_value:-$current_value}
    else
        read -p "$description: " new_value
        echo $new_value
    fi
}

# Get current values if they exist
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
fi

echo "Hasenpfeffr Configuration Update"
echo "==============================="
echo "This script will update the configuration in $CONFIG_FILE"
echo "Press Ctrl+C at any time to cancel"
echo ""

# Get updated values
RELAY_URL=$(get_config_value "HASENPFEFFR_RELAY_URL" "$HASENPFEFFR_RELAY_URL" "Relay URL" false)
RELAY_PUBKEY=$(get_config_value "HASENPFEFFR_RELAY_PUBKEY" "$HASENPFEFFR_RELAY_PUBKEY" "Relay Public Key" false)
RELAY_NSEC=$(get_config_value "HASENPFEFFR_RELAY_NSEC" "$HASENPFEFFR_RELAY_NSEC" "Relay Private Key" true)

NEO4J_URI=$(get_config_value "NEO4J_URI" "$NEO4J_URI" "Neo4j URI" false)
NEO4J_USER=$(get_config_value "NEO4J_USER" "$NEO4J_USER" "Neo4j Username" false)
NEO4J_PASSWORD=$(get_config_value "NEO4J_PASSWORD" "$NEO4J_PASSWORD" "Neo4j Password" true)

BATCH_SIZE=$(get_config_value "HASENPFEFFR_BATCH_SIZE" "$HASENPFEFFR_BATCH_SIZE" "Batch Size" false)
DELAY_BETWEEN_BATCHES=$(get_config_value "HASENPFEFFR_DELAY_BETWEEN_BATCHES" "$HASENPFEFFR_DELAY_BETWEEN_BATCHES" "Delay Between Batches (ms)" false)
DELAY_BETWEEN_EVENTS=$(get_config_value "HASENPFEFFR_DELAY_BETWEEN_EVENTS" "$HASENPFEFFR_DELAY_BETWEEN_EVENTS" "Delay Between Events (ms)" false)
MAX_RETRIES=$(get_config_value "HASENPFEFFR_MAX_RETRIES" "$HASENPFEFFR_MAX_RETRIES" "Max Retries" false)
MAX_CONCURRENT=$(get_config_value "HASENPFEFFR_MAX_CONCURRENT_CONNECTIONS" "$HASENPFEFFR_MAX_CONCURRENT_CONNECTIONS" "Max Concurrent Connections" false)

INPUT_FILE=$(get_config_value "HASENPFEFFR_INPUT_FILE" "$HASENPFEFFR_INPUT_FILE" "Input File Path" false)
KEYS_FILE=$(get_config_value "HASENPFEFFR_KEYS_FILE" "$HASENPFEFFR_KEYS_FILE" "Keys File Path" false)

CONTROL_PANEL_PORT=$(get_config_value "CONTROL_PANEL_PORT" "$CONTROL_PANEL_PORT" "Control Panel Port" false)

# Update the configuration file
cat > "$CONFIG_FILE" << EOF
#!/bin/bash
# Hasenpfeffr Configuration File
# Last updated: $(date)
# DO NOT EDIT THIS FILE DIRECTLY - Use update-config.sh instead

# ==========================================
# SENSITIVE CONFIGURATION - KEEP SECURE
# ==========================================

# Relay configuration
export HASENPFEFFR_RELAY_URL="$RELAY_URL"
export HASENPFEFFR_RELAY_PUBKEY="$RELAY_PUBKEY"
export HASENPFEFFR_RELAY_NSEC="$RELAY_NSEC"

# Neo4j configuration
export NEO4J_URI="$NEO4J_URI"
export NEO4J_USER="$NEO4J_USER"
export NEO4J_PASSWORD="$NEO4J_PASSWORD"

# ==========================================
# GENERAL CONFIGURATION
# ==========================================

# Performance tuning
export HASENPFEFFR_BATCH_SIZE="$BATCH_SIZE"
export HASENPFEFFR_DELAY_BETWEEN_BATCHES="$DELAY_BETWEEN_BATCHES"
export HASENPFEFFR_DELAY_BETWEEN_EVENTS="$DELAY_BETWEEN_EVENTS"
export HASENPFEFFR_MAX_RETRIES="$MAX_RETRIES"
export HASENPFEFFR_MAX_CONCURRENT_CONNECTIONS="$MAX_CONCURRENT"

# File paths
export HASENPFEFFR_INPUT_FILE="$INPUT_FILE"
export HASENPFEFFR_KEYS_FILE="$KEYS_FILE"

# Control panel configuration
export CONTROL_PANEL_PORT="$CONTROL_PANEL_PORT"
EOF

# Set proper permissions
sudo chown root:hasenpfeffr "$CONFIG_FILE" 2>/dev/null || echo "Warning: Could not set ownership to root:hasenpfeffr"
sudo chmod 640 "$CONFIG_FILE"

echo ""
echo "Configuration updated successfully!"
echo "File: $CONFIG_FILE"

# Ask if services should be restarted
read -p "Do you want to restart affected services? (y/n): " restart_services

if [ "$restart_services" = "y" ] || [ "$restart_services" = "Y" ]; then
    echo "Restarting services..."
    
    # Check if services exist before attempting to restart
    if systemctl list-unit-files | grep -q hasenpfeffr-control-panel; then
        systemctl restart hasenpfeffr-control-panel
        echo "- hasenpfeffr-control-panel restarted"
    fi
    
    if systemctl list-unit-files | grep -q neo4j; then
        systemctl restart neo4j
        echo "- neo4j restarted"
    fi
    
    echo "Services restarted successfully!"
else
    echo "Services not restarted. You may need to restart them manually."
fi

echo ""
echo "Configuration update complete!"
